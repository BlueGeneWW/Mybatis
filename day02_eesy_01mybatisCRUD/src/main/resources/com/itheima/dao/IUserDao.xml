<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itheima.dao.IUserDao">

    <!-- 配置 查询结果的列名和实体类的属性名的对应关系 -->
    <resultMap id="userMap" type="uSeR">
        <!-- 主键字段的对应 -->
        <id property="userId" column="id"></id>
        <!--非主键字段的对应-->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
    </resultMap>

    <!-- 查询所有 -->
    <select id="findAll" resultMap="userMap">
        <!--
       当数据库中的表中字段和pojo类中的字段匹配不上时的解决方式：
         起别名：效率是最高的；
         mybatis框架的解决方式：resultMap配置查询结果的列名和实体类的属性名的对应关系。
        -->
        <!--select id as userId,username as userName,address as userAddress,sex as userSex,birthday as userBirthday from user;-->
        select * from user;
    </select>

    <!-- 保存用户
    parameterType="user"：mybatis框架根据传入的参数类型，反射出它里面的属性拿到值，完成插入数据
    -->
    <insert id="saveUser" parameterType="user">
        <!-- 配置插入操作后，获取插入数据的id。
         keyProperty：实体类中对应的属性名称
         keyColumn：数据库表中对应的列名
         resultType：返回值类型
         order：表示的是什么时候进行这个操作
         -->
        <selectKey keyProperty="userId" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday)values(#{userName},#{userAddress},#{userSex},#{userBirthday});
    </insert>

    <!-- 更新用户 -->
    <update id="updateUser" parameterType="USER">
        update user set username=#{userName},address=#{userAddress},sex=#{userAex},birthday=#{userBirthday} where id=#{userId}
    </update>

    <!-- 删除用户
    对于删除方法，如果参数是一个基本类型或基本类型包装类的参数传递时，也就是这个占位符只有一位时可以随意写。
    -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{uid}
    </delete>
    
    <!-- 根据id查询用户 -->
    <select id="findById" parameterType="INT" resultMap="userMap">
        select * from user where id = #{uid}
    </select>

    <!-- 根据名称模糊查询 -->
    <select id="findByName" parameterType="string" resultMap="userMap">
          select * from user where username like #{name}
          <!-- 测试类中的测试方法去掉百分号采用下面种写法，但是不常用-->
        <!-- select * from user where username like '%${value}%'-->
   </select>

    <!-- 获取用户的总记录条数
     聚合函数：查询返回一行一列。
     -->
    <select id="findTotal" resultType="int">
        select count(id) from user;
    </select>

    <!--parameterType传递pojo包装对象-->
    <!-- 根据queryVo的条件查询用户 -->
    <select id="findUserByVo" parameterType="com.itheima.domain.QueryVo" resultMap="userMap">
        select * from user where username like #{user.username}
    </select>
</mapper>